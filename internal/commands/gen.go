//go:build ignore
// +build ignore

package main

import (
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/brandonc/advent2022/internal/ui"
)

type Solution struct {
	Number  string
	Package string
}

func getNumber(day string) string {
	if !strings.HasPrefix(day, "day") {
		panic("expected day to start with \"day\"")
	}

	start := 3
	if day[start] == '0' {
		start++
	}

	return day[start:]
}

func main() {
	f, err := os.Create("commands.go")
	if ui.Die(err) {
		os.Exit(1)
	}

	solutions := make([]Solution, 0)
	if ui.Die(filepath.WalkDir("../../solutions", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if !d.IsDir() || !strings.HasPrefix(d.Name(), "day") {
			return nil
		}

		solutions = append(solutions, Solution{
			Number:  getNumber(d.Name()),
			Package: d.Name(),
		})

		return nil
	})) {
		os.Exit(1)
	}

	packageTemplate.Execute(f, struct {
		Solutions []Solution
	}{
		Solutions: solutions,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package commands

import (
{{- range .Solutions }}
	"github.com/brandonc/advent2022/solutions/{{.Package}}"
{{- end }}
	"github.com/brandonc/advent2022/solutions/solution"
)

var SolutionCommands = map[string]solution.SolutionFactory{
{{- range .Solutions }}
	"{{.Number}}": {{.Package}}.Factory,
{{- end }}
}
`))
